{
  "resolvedId": "/home/debian/goodot/nuxt/goodot/node_modules/@unhead/vue/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { useScript as useScript$1 } from 'unhead';\nexport { CapoPlugin, HashHydrationPlugin, createHeadCore } from 'unhead';\nimport { i as injectHead, h as headSymbol, V as Vue3 } from './shared/vue.f49591ad.mjs';\nexport { c as createHead, a as createServerHead, r as resolveUnrefHeadInput, s as setHeadInjectionHandler } from './shared/vue.f49591ad.mjs';\nimport { composableNames, whitelistSafeInput, unpackMeta } from '@unhead/shared';\nimport { u as useHead } from './shared/vue.8fc199ce.mjs';\nimport { getCurrentInstance, onMounted, isRef, watch, onScopeDispose, ref } from 'vue';\n\nconst coreComposableNames = [\n  \"injectHead\"\n];\nconst unheadVueComposablesImports = {\n  \"@unhead/vue\": [...coreComposableNames, ...composableNames]\n};\n\nfunction useHeadSafe(input, options = {}) {\n  return useHead(input, { ...options, transform: whitelistSafeInput });\n}\n\nfunction registerVueScopeHandlers(script, scope) {\n  if (!scope) {\n    return;\n  }\n  const _registerCb = (key, cb) => {\n    if (!script._cbs[key]) {\n      cb(script.instance);\n      return () => {\n      };\n    }\n    let i = script._cbs[key].push(cb);\n    const destroy = () => {\n      if (i) {\n        script._cbs[key]?.splice(i - 1, 1);\n        i = null;\n      }\n    };\n    onScopeDispose(destroy);\n    return destroy;\n  };\n  script.onLoaded = (cb) => _registerCb(\"loaded\", cb);\n  script.onError = (cb) => _registerCb(\"error\", cb);\n  onScopeDispose(() => {\n    script._triggerAbortController?.abort();\n  });\n}\nfunction useScript(_input, _options) {\n  const input = typeof _input === \"string\" ? { src: _input } : _input;\n  const options = _options || {};\n  const head = options?.head || injectHead();\n  options.head = head;\n  const scope = getCurrentInstance();\n  options.eventContext = scope;\n  if (scope && typeof options.trigger === \"undefined\") {\n    options.trigger = onMounted;\n  } else if (isRef(options.trigger)) {\n    const refTrigger = options.trigger;\n    let off;\n    options.trigger = new Promise((resolve) => {\n      off = watch(refTrigger, (val) => {\n        if (val) {\n          resolve(true);\n        }\n      }, {\n        immediate: true\n      });\n      onScopeDispose(() => resolve(false), true);\n    }).then((val) => {\n      off?.();\n      return val;\n    });\n  }\n  head._scriptStatusWatcher = head._scriptStatusWatcher || head.hooks.hook(\"script:updated\", ({ script: s }) => {\n    s._statusRef.value = s.status;\n  });\n  const script = useScript$1(input, options);\n  script._statusRef = script._statusRef || ref(script.status);\n  registerVueScopeHandlers(script, scope);\n  return new Proxy(script, {\n    get(_, key, a) {\n      return Reflect.get(_, key === \"status\" ? \"_statusRef\" : key, a);\n    }\n  });\n}\n\nfunction useSeoMeta(input, options) {\n  const { title, titleTemplate, ...meta } = input;\n  return useHead({\n    title,\n    titleTemplate,\n    // @ts-expect-error runtime type\n    _flatMeta: meta\n  }, {\n    ...options,\n    transform(t) {\n      const meta2 = unpackMeta({ ...t._flatMeta });\n      delete t._flatMeta;\n      return {\n        // @ts-expect-error runtime type\n        ...t,\n        meta: meta2\n      };\n    }\n  });\n}\n\nfunction useServerHead(input, options = {}) {\n  const head = options.head || injectHead();\n  delete options.head;\n  if (head)\n    return head.push(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerHeadSafe(input, options = {}) {\n  return useHeadSafe(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerSeoMeta(input, options) {\n  return useSeoMeta(input, { ...options, mode: \"server\" });\n}\n\nconst Vue2ProvideUnheadPlugin = (_Vue, head) => {\n  _Vue.mixin({\n    beforeCreate() {\n      const options = this.$options;\n      const origProvide = options.provide;\n      options.provide = function() {\n        let origProvideResult;\n        if (typeof origProvide === \"function\")\n          origProvideResult = origProvide.call(this);\n        else\n          origProvideResult = origProvide || {};\n        return {\n          ...origProvideResult,\n          [headSymbol]: head\n        };\n      };\n    }\n  });\n};\n\nconst VueHeadMixin = {\n  created() {\n    let source = false;\n    if (Vue3) {\n      const instance = getCurrentInstance();\n      if (!instance)\n        return;\n      const options = instance.type;\n      if (!options || !(\"head\" in options))\n        return;\n      source = typeof options.head === \"function\" ? () => options.head.call(instance.proxy) : options.head;\n    } else {\n      const head = this.$options.head;\n      if (head) {\n        source = typeof head === \"function\" ? () => head.call(this) : head;\n      }\n    }\n    source && useHead(source);\n  }\n};\n\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, injectHead, unheadVueComposablesImports, useHead, useHeadSafe, useScript, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta };\n",
      "start": 1729960132174,
      "end": 1729960132375,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1729960132375,
      "end": 1729960132375,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1729960132375,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "nuxt:prehydrate-transform",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1729960132376,
      "end": 1729960132376,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1729960132377,
      "end": 1729960132377,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1729960132377,
      "end": 1729960132377,
      "order": "normal"
    }
  ]
}
