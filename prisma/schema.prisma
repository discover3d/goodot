datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Repository {
  id                      Int      @unique
  node_id                 String   @unique // Unique GitHub node ID for the repository
  name                    String   // Name of the repository
  full_name               String   // Full name of the repository (owner/repo)
  html_url                String?  // HTML URL for the repository
  description             String?  // Description of the repository
  fork                    Boolean  // Whether the repository is a fork
  url                     String?  // API URL for the repository
  forks_url               String?  // URL for forks
  keys_url                String?  // URL for keys
  collaborators_url       String?  // URL for collaborators
  teams_url               String?  // URL for teams
  hooks_url               String?  // URL for hooks
  issue_events_url        String?  // URL for issue events
  events_url              String?  // URL for events
  assignees_url           String?  // URL for assignees
  branches_url            String?  // URL for branches
  tags_url                String?  // URL for tags
  blobs_url               String?  // URL for blobs
  git_tags_url            String?  // URL for git tags
  git_refs_url            String?  // URL for git refs
  trees_url               String?  // URL for trees
  statuses_url            String?  // URL for statuses
  languages_url           String?  // URL for languages
  stargazers_url          String?  // URL for stargazers
  contributors_url        String?  // URL for contributors
  subscribers_url         String?  // URL for subscribers
  subscription_url        String?  // URL for subscription
  commits_url             String?  // URL for commits
  git_commits_url         String?  // URL for git commits
  comments_url            String?  // URL for comments
  issue_comment_url       String?  // URL for issue comments
  contents_url            String?  // URL for contents
  compare_url             String?  // URL for compare
  merges_url              String?  // URL for merges
  archive_url             String?  // URL for archive
  downloads_url           String?  // URL for downloads
  issues_url              String?  // URL for issues
  pulls_url               String?  // URL for pulls
  milestones_url          String?  // URL for milestones
  notifications_url       String?  // URL for notifications
  labels_url              String?  // URL for labels
  releases_url            String?  // URL for releases
  deployments_url         String?  // URL for deployments
  created_at              DateTime // Creation date of the repository
  updated_at              DateTime // Last updated date of the repository
  pushed_at               DateTime // Last pushed date of the repository
  git_url                 String?  // Git URL for the repository
  ssh_url                 String?  // SSH URL for the repository
  clone_url               String?  // Clone URL for the repository
  svn_url                 String?  // SVN URL for the repository
  homepage                String?  // SVN URL for the repository
  size                    Int      // Size of the repository
  stargazers_count        Int      // Number of stargazers
  watchers_count          Int      // Number of watchers
  language                String?  // Primary language of the repository
  has_issues              Boolean  // Whether the repository has issues
  has_projects            Boolean  // Whether the repository has projects
  has_downloads           Boolean  // Whether the repository has downloads
  has_wiki                Boolean  // Whether the repository has a wiki
  has_pages               Boolean  // Whether the repository has pages
  has_discussions         Boolean  // Whether the repository has discussions
  forks_count             Int      // Number of forks
  mirror_url              String?
  archived               Boolean
  disabled         Boolean
  open_issues_count       Int      // Number of open issues
  allow_forking           Boolean  // Whether forking is allowed
  is_template             Boolean  // Whether the repository is a template
  web_commit_signoff_required Boolean // Whether web commit signoff is required
  visibility              String?  // Visibility of the repository (e.g., "public")
  forks                   Int?
  open_issues             Int?
  watchers                Int?
  default_branch          String?  // Default branch of the repository
  temp_clone_token        String?
  network_count           Int?
  subscribers_count       Int?
  userId                  String?  // Foreign key to the User model
}

model License {
  id         Int      @id @default(autoincrement())
  key        String
  name       String
  spdx_id    String
  url        String?
  node_id    String
}

model Permissions {
  id         Int      @id @default(autoincrement())
  admin      Boolean
  maintain   Boolean
  push       Boolean
  triage     Boolean
  pull       Boolean
}

model User {
  id                String   @id @default(cuid()) // Unique identifier for the user
  node_id          String   @unique // Unique GitHub node ID for the user
  login            String   @unique // GitHub username
  avatar_url       String?  // URL of the user's avatar
  gravatar_id      String?  // Gravatar ID
  url              String?  // API URL for the user
  html_url         String?  // HTML URL for the user
  followers_url    String?  // URL for followers
  following_url    String?  // URL for following
  gists_url        String?  // URL for gists
  starred_url      String?  // URL for starred repositories
  subscriptions_url String?  // URL for subscriptions
  organizations_url String?  // URL for organizations
  repos_url        String?  // URL for repositories
  events_url       String?  // URL for events
  received_events_url String? // URL for received events
  type             String?  // Type of user (e.g., User, Organization)
  site_admin       Boolean? // Whether the user is a site admin
}

model Topic {
  id          Int         @id @default(autoincrement())
  name        String
}
